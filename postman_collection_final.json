{
	"info": {
		"_postman_id": "4ae912c9-abaf-4ee9-a1aa-fbcb21b8e6fb",
		"name": "eventapis-example-ecommerce Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "orders",
			"item": [
				{
					"name": "findOrders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"findOrders_CorrectParams_StatusToEqual200\", () => {   ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"findOrders_CorrectParams_ContentToBeArray\", () => {   ",
									"    pm.expect(responseJson.content).to.be.a('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "pageNumber",
									"value": "<integer>"
								},
								{
									"key": "pageSize",
									"value": "<integer>"
								},
								{
									"key": "paged",
									"value": "<boolean>"
								},
								{
									"key": "sort.sorted",
									"value": "<boolean>"
								},
								{
									"key": "sort.unsorted",
									"value": "<boolean>"
								},
								{
									"key": "unpaged",
									"value": "<boolean>"
								}
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "createOrder (correct body)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = `${pm.environment.get('baseUrl')}/stocks` //createStock",
									"",
									"const reqBody = {",
									"    \"stockName\": \"utoy\",",
									"    \"remainingStock\": \"100\"",
									"}",
									"",
									"pm.sendRequest({",
									"    url,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(reqBody)",
									"    }",
									"}, (err, response) => {",
									"",
									"    const responseJson = response.json(); // stock control response body",
									"    pm.globals.set('stockId',responseJson.entityId)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const createOrderResponse = pm.response.json();",
									"",
									"",
									"pm.test(\"createOrder_CorrectBody_StatusToEqual200\", () => {   ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"createOrder_CorrectBody_EntityIdToBeStringAndVersionToEqual0\", () => {   ",
									"    pm.expect(createOrderResponse.entityId).to.be.a('string');",
									"    pm.expect(createOrderResponse.version).to.eql(0);    ",
									"});",
									"",
									"",
									"const createdOrderId = createOrderResponse.entityId;",
									"",
									"const url = `${pm.environment.get('baseUrl')}/orders/${createdOrderId}` // findOrderById",
									"",
									"  pm.sendRequest(url, (err, response) => {",
									"        const findOrderByIdResponse = response.json();",
									"        pm.test(\"findOrderById_CreatedEntityIdWith0ms_StatusNotEqualOK\", () => {   ",
									"            pm.expect(response.status).to.not.eql('OK');",
									"        });",
									"        ",
									"        pm.test(\"findOrderById_CreatedEntityIdWith0ms_ResponseNotHaveId\", () => {   ",
									"            pm.expect(findOrderByIdResponse).to.not.have.any.keys(('id'));",
									"        });",
									"",
									"    });",
									"",
									"setTimeout(() => {",
									"    pm.sendRequest(url, (err, response) => {",
									"        const findOrderByIdResponse = response.json();",
									"",
									"        pm.test(\"findOrderById_CreatedEntityIdWith1500msDelay_StatusToEqualOK\", () => {   ",
									"            pm.expect(response.status).to.eql('OK');",
									"        });",
									"        ",
									"        pm.test(\"findOrderById_CreatedEntityIdWith1500msDelay_EntityIdToEqualId\", () => {   ",
									"            pm.expect(findOrderByIdResponse.id).to.eql(createdOrderId);",
									"        });",
									"",
									"    });",
									"},1500)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stockId\": \"{{stockId}}\",\n    \"orderAmount\": \"10\",\n    \"description\": \"Test3\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": [
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "createOrder (correct body by considering event sourcing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = `${pm.environment.get('baseUrl')}/stocks` //createStock",
									"",
									"const reqBody = {",
									"    \"stockName\": \"utoy\",",
									"    \"remainingStock\": \"100\"",
									"}",
									"",
									"pm.sendRequest({",
									"    url,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(reqBody)",
									"    }",
									"}, (err, response) => {",
									"",
									"    const responseJson = response.json(); // stock control response body",
									"    pm.globals.set('stockId',responseJson.entityId)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const createOrderResponseJson = pm.response.json();",
									"",
									"const createdOrderId = createOrderResponseJson.entityId",
									"",
									"const url = `${pm.environment.get('baseUrl')}/orders/${createdOrderId}/history` //findOrderHistoriesByStockId",
									"",
									"pm.sendRequest(url, (err, response) => {",
									"",
									"    const content = response.json(); // stock control response body",
									"",
									"    pm.test(\"findOrderHistoriesByOrderId_CreatedOrderId_FirstEventSuccess\", () => {   ",
									"        pm.expect(content[0].eventType).to.eql(\"OrderCreatedEvent\");",
									"        pm.expect(content[0].eventKey.version).to.eql(0);",
									"    });",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stockId\": \"{{stockId}}\",\n    \"orderAmount\": \"10\",\n    \"description\": \"Test3\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "cancelOrder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const urlStock = `${pm.environment.get('baseUrl')}/stocks` //createStock",
									"const urlOrder = `${pm.environment.get('baseUrl')}/orders`",
									"",
									"const reqBodyStock = {",
									"    \"stockName\": \"utoy\",",
									"    \"remainingStock\": \"100\"",
									"}",
									"",
									"pm.sendRequest({",
									"    url: urlStock,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(reqBodyStock)",
									"    }",
									"}, (err, response) => {",
									"    console.log(response.json())",
									"    const responseJson = response.json(); // stock control response body",
									"    const body = {",
									"        \"stockId\": responseJson.entityId,",
									"        \"orderAmount\": \"10\",",
									"        \"description\": \"Test3\"",
									"    }",
									"    pm.sendRequest({",
									"    url: urlOrder,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"            raw: JSON.stringify(body)",
									"        }",
									"    }, (err, response) => {",
									"        const responseJsonOrder = response.json(); // stock control response body",
									"        const orderId = responseJsonOrder.entityId",
									"        pm.globals.set('orderId',orderId)",
									"        const urlProcessOrder = `${pm.environment.get('baseUrl')}/orders/${orderId}/process`",
									"        const processOrderBody = {",
									"            \"paymentInformation\": {",
									"                \"amount\": \"25\",",
									"                \"paymentAddress\": \"Test\",",
									"                \"cardInformation\": \"1111222233334444\"",
									"            }",
									"        }",
									"        pm.sendRequest({",
									"        url: urlProcessOrder,",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(processOrderBody)",
									"            }",
									"        }, (err, response) => {",
									"            if (err) {",
									"                console.log(err)",
									"            } else {",
									"                console.log(response.json())",
									"            }",
									"        })",
									"        setTimeout(() => {}, 3000)",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const cancelOrderResponse = pm.response.json();",
									"console.log(cancelOrderResponse)",
									"const findOrderByIdUrl = `${pm.environment.get('baseUrl')}/orders/${pm.globals.get('orderId')}`",
									"",
									"pm.test(\"cancelOrder_CorrectBody_StatusToEqual200\", () => {   ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"cancelOrder_CorrectBody_EntityIdToBeStringAndVersionToEqual0\", () => {   ",
									"    pm.expect(cancelOrderResponse.entityId).to.be.a('string');",
									"    pm.expect(cancelOrderResponse.version).to.not.eql(0);    ",
									"});",
									"",
									"setTimeout(() => {",
									"    pm.sendRequest({",
									"    url: findOrderByIdUrl,",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, (err, response) => {",
									"    const jsonResponse = response.json()",
									"    console.log(jsonResponse)",
									"    const state = jsonResponse.state",
									"    pm.test(\"cancelOrder_CorrectBody_EntityStateCancelled\",() => {",
									"        pm.expect(state).to.eql(\"CANCELLED\");    ",
									"    })",
									"})",
									"}, 3000)",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": [
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"cancel"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"cancel"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"cancel"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"cancel"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"cancel"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "processOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const processOrderResponseJson = pm.response.json();",
									"",
									"",
									"pm.test(\"processOrder_CorrectBody_StatusToEqual200\", () => {   ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"processOrder_CorrectBody_EntityIdToBeString\", () => {   ",
									"    pm.expect(processOrderResponseJson.entityId).to.be.a('string');",
									"});",
									"",
									"",
									"/* cancel order test codes not done. ",
									"",
									"const selectedOrderWhichPAID = () => responseJson.content.find(order => order.state === \"PAID\")",
									"",
									"const selectedOrder = selectedOrderWhichPAID();",
									"",
									"let url = `${pm.environment.get('baseUrl')}/orders/${selectedOrder.id}` // cancel order by id (it works for only paid orders)",
									"",
									"",
									"pm.sendRequest({",
									"    url,",
									"    method: 'DELETE'",
									"}, (err, response) => {",
									"",
									"    const cancelOrderResponseJson = response.json(); ",
									"",
									"    pm.test(\"cancelOrder_CorrectParams_StatusToEqual200\", () => {   ",
									"        pm.expect(response.status).to.equal(200);",
									"    });",
									"",
									"    pm.test(\"cancelOrder_CorrectParams_EntityIdToBeString\", () => {   ",
									"        pm.expect(cancelOrderResponseJson.entityId).to.be.a('string');",
									"    });",
									"",
									"",
									"});",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const baseUrl = pm.environment.get('baseUrl');",
									"pm.sendRequest({",
									"        url: baseUrl + '/orders',",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        },",
									"        }, (err, response) => {",
									"            if (err) {",
									"                console.log(err)",
									"            } else {",
									"                const res = response.json();",
									"                pm.globals.set('proccessedOrder', res.content[0].id);",
									"                console.log(response.json())",
									"            }",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentInformation\": {\n        \"amount\": \"25\",\n        \"paymentAddress\": \"Test\",\n        \"cardInformation\": \"1111222233334444\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders/{{proccessedOrder}}/process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{proccessedOrder}}",
								"process"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentInformation\": {\n        \"amount\": \"<float>\",\n        \"paymentAddress\": \"<string>\",\n        \"cardInformation\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/process",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"process"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentInformation\": {\n        \"amount\": \"<float>\",\n        \"paymentAddress\": \"<string>\",\n        \"cardInformation\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/process",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"process"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentInformation\": {\n        \"amount\": \"<float>\",\n        \"paymentAddress\": \"<string>\",\n        \"cardInformation\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/process",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"process"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentInformation\": {\n        \"amount\": \"<float>\",\n        \"paymentAddress\": \"<string>\",\n        \"cardInformation\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/process",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"process"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentInformation\": {\n        \"amount\": \"<float>\",\n        \"paymentAddress\": \"<string>\",\n        \"cardInformation\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId/process",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId",
										"process"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "payments",
			"item": [
				{
					"name": "findPayments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"findPayments_CorrectParams_StatusToEqual200\", () => {   ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"findPayments_CorrectParams_ContentToBeArray\", () => {   ",
									"    pm.expect(responseJson.content).to.be.a('array');",
									"});",
									"",
									"if(responseJson.content.length > 0){",
									"    const selectedPayment = responseJson.content[0];",
									"    let url = `${pm.environment.get('baseUrl')}/payments/${selectedPayment.id}` // findPaymentById",
									"    pm.sendRequest({",
									"        url,",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        }",
									"    }, (err, response) => {",
									"",
									"        const responseJson = response.json(); // fidn stock by id response body",
									"",
									"        pm.test(\"findPaymentById_CorrectParams_StatusToEqual200\", () => {   ",
									"            pm.expect(response.code).to.eql(200);",
									"        });",
									"",
									"        pm.test(\"findPaymentById_CorrectParams_IdToEqualWithSelectedPayment\", () => {   ",
									"            pm.expect(responseJson.id).to.eql(selectedPayment.id);",
									"        });",
									"",
									"    });",
									"}",
									"",
									"",
									"",
									"// wrong body example",
									"",
									" let url = `${pm.environment.get('baseUrl')}/payments/wrong-${Math.floor(Math.random()*100)}` // findPaymentById",
									"    pm.sendRequest({",
									"        url,",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        }",
									"    }, (err, response) => {",
									"",
									"        const responseJson = response.json(); // fidn stock by id response body",
									"",
									"        pm.test(\"findPaymentById_WrongParams_StatusToEqual500\", () => {   ",
									"            pm.expect(response.code).to.eql(500);",
									"        });",
									"",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "pageNumber",
									"value": "<integer>"
								},
								{
									"key": "pageSize",
									"value": "<integer>"
								},
								{
									"key": "paged",
									"value": "<boolean>"
								},
								{
									"key": "sort.sorted",
									"value": "<boolean>"
								},
								{
									"key": "sort.unsorted",
									"value": "<boolean>"
								},
								{
									"key": "unpaged",
									"value": "<boolean>"
								}
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "findPayments (to test payment histories)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"",
									"if(responseJson.content.length > 0){",
									"    const selectedPayment = responseJson.content[0];",
									"    let url = `${pm.environment.get('baseUrl')}/payments/${selectedPayment.id}/history` // findPaymentById",
									"    pm.sendRequest({",
									"        url,",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        }",
									"    }, (err, response) => {",
									"",
									"        const responseJson = response.json(); // fidn stock by id response body",
									"        ",
									"        pm.test(\"findPaymentHistoriesByPaymentId_CorrectParams_ResponseToBeNotEmptyArray\", () => {   ",
									"            pm.expect(responseJson).to.be.a('array');",
									"            pm.expect(responseJson.length).to.be.above(0);",
									"        });",
									"    });",
									"}",
									"",
									"    let url = `${pm.environment.get('baseUrl')}/payments/wrong-${Math.floor(Math.random()*100)}/history` // findPaymentById",
									"    pm.sendRequest({",
									"        url,",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        }",
									"    }, (err, response) => {",
									"",
									"        const responseJson = response.json(); // fidn stock by id response body",
									"        console.log(responseJson)",
									"        pm.test(\"findPaymentHistoriesByPaymentId_CorrectParams_ResponseToBeNotEmptyArray\", () => {   ",
									"            pm.expect(responseJson).to.be.a('array');",
									"            pm.expect(responseJson.length).to.eql(0);",
									"        });",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "pageNumber",
									"value": "<integer>"
								},
								{
									"key": "pageSize",
									"value": "<integer>"
								},
								{
									"key": "paged",
									"value": "<boolean>"
								},
								{
									"key": "sort.sorted",
									"value": "<boolean>"
								},
								{
									"key": "sort.unsorted",
									"value": "<boolean>"
								},
								{
									"key": "unpaged",
									"value": "<boolean>"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "findPayments (to test findpaymentbyidandversion)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"if(responseJson.content.length > 0){",
									"    const selectedPayment = responseJson.content[0];",
									"    let url = `${pm.environment.get('baseUrl')}/payments/${selectedPayment.id}/${selectedPayment.eventKey.version}` // findPaymentByIdandVersion",
									"    pm.sendRequest({",
									"        url,",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        }",
									"    }, (err, response) => {",
									"        console.log(response)",
									"        const responseJson = response.json();",
									"        pm.test(\"findPaymentByPaymentIdAndVersion_CorrectParams_ResponseToBeObject\", () => {   ",
									"            pm.expect(responseJson).to.be.a('object');",
									"        });",
									"",
									"        pm.test(\"findPaymentByPaymentIdAndVersion_CorrectParams_ResponseVersionToBeCorrect\", () => {   ",
									"            pm.expect(responseJson.eventKey.version).to.eql(selectedPayment.eventKey.version);",
									"        });",
									"",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "pageNumber",
									"value": "<integer>"
								},
								{
									"key": "pageSize",
									"value": "<integer>"
								},
								{
									"key": "paged",
									"value": "<boolean>"
								},
								{
									"key": "sort.sorted",
									"value": "<boolean>"
								},
								{
									"key": "sort.unsorted",
									"value": "<boolean>"
								},
								{
									"key": "unpaged",
									"value": "<boolean>"
								}
							]
						}
					},
					"response": [
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/payments?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "returnPayment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const returnPaymentResponse = pm.response.json();",
									"const requestBody = pm.request.body;",
									"const requestBodyJson = JSON.parse(requestBody.raw)",
									"const url = `${pm.environment.get('baseUrl')}/payments/${requestBodyJson.paymentId}`",
									"",
									"pm.test(\"returnPayment_StatusToEqual200\", () => {   ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"setTimeout(() => {",
									"    pm.sendRequest({",
									"        url,",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        }",
									"    }, (err, response) => {",
									"        if (err) {",
									"            console.log(err);",
									"        } {",
									"            const responseJson = response.json();",
									"            pm.test(\"IsPaymentReturned_Test\", () => {",
									"                const expectedState = \"RETURN\";",
									"                pm.expect(responseJson.state).to.eql(expectedState);",
									"            });",
									"        }",
									"    })",
									"}, 2000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderId\": \"4f1c2043-4979-4e93-8ec9-dd6dac6a8ba6\",\n    \"paymentId\": \"3606ccf1-ec09-4103-b2ac-f1a6bcca94f9\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/payments/3606ccf1-ec09-4103-b2ac-f1a6bcca94f9/return",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"3606ccf1-ec09-4103-b2ac-f1a6bcca94f9",
								"return"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/payments/:paymentId/return",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments",
										":paymentId",
										"return"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/payments/:paymentId/return",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments",
										":paymentId",
										"return"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/payments/:paymentId/return",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments",
										":paymentId",
										"return"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/payments/:paymentId/return",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments",
										":paymentId",
										"return"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orderId\": \"<string>\",\n    \"paymentId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/payments/:paymentId/return",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments",
										":paymentId",
										"return"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "stock",
			"item": [
				{
					"name": "createStock (correct body)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"createStock_CorrectBody_StatusToEqual200\", () => {   ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"createStock_CorrectBody_EntityIdToBeStringAndVersionToEqual1\", () => {   ",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.entityId).to.be.a('string');",
									"    pm.expect(responseJson.version).to.eql(1);    ",
									"});",
									"",
									"const pmResponse = pm.response.json();",
									"const url = `${pm.environment.get('baseUrl')}/stocks/${pmResponse.entityId}` // findStockById",
									"",
									"pm.sendRequest(url, (err, response) => {",
									"",
									"    const responseJson = response.json(); // stock control response body",
									"    const body = pm.request.body.toJSON(); // create stock request body",
									"",
									"    pm.test(\"findStockById_CreatedEntityId_StatusToEqualOK\", () => {   ",
									"        pm.expect(response.status).to.eql('OK');",
									"    });",
									"",
									"    pm.test(\"findStockById_CreatedEntityId_EntityStateToEqualINUSE\", () => {   ",
									"        pm.expect(responseJson.state).to.eql('INUSE');",
									"    });",
									"",
									"    pm.test(\"findStockById_CreatedEntityId_StockNameToEqualSentStockName\", () => {   ",
									"        pm.expect(responseJson.stockName).to.eql(JSON.parse(body.raw).stockName);",
									"    });",
									"",
									"    pm.test(\"findStockById_CreatedEntityIdWith0msDelay_RemainingStockToEqualSentRemainingStock\", () => {   ",
									"        ",
									"        pm.expect(responseJson.remainingStock.toString()).to.not.eql(JSON.parse(body.raw).remainingStock);",
									"    });",
									"",
									"});",
									"",
									"",
									"setTimeout(() => {",
									"    pm.sendRequest(url, (err, response) => {",
									"        const responseJson = response.json(); // stock control response body",
									"        const body = pm.request.body.toJSON(); // create stock request body",
									"",
									"        pm.test(\"findStockById_CreatedEntityIdWith1000msDelay_RemainingStockToEqualSentRemainingStock\", function () {   ",
									"            pm.expect(responseJson.remainingStock.toString()).to.eql(JSON.parse(body.raw).remainingStock);",
									"        });",
									"",
									"    });",
									"},1000)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stockName\": \"utoy\",\n    \"remainingStock\": \"100\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/stocks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stocks"
							]
						}
					},
					"response": [
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "createStock (correct body by considering event sourcing)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const pmResponse = pm.response.json();",
									"const url = `${pm.environment.get('baseUrl')}/stocks/${pmResponse.entityId}/history` //findStockHistoriesByStockId",
									"",
									"pm.sendRequest(url, (err, response) => {",
									"",
									"    const content = response.json(); // stock control response body",
									"",
									"    pm.test(\"findStockHistoriesByStockId_CreatedEntityId_FirstEventSuccess\", () => {   ",
									"        pm.expect(content[0].eventType).to.eql(\"StockCreatedEvent\");",
									"        pm.expect(content[0].eventKey.version).to.eql(0);",
									"    });",
									"",
									"    pm.test(\"findStockHistoriesByStockId_CreatedEntityId_SecondEventSuccess\", () => {   ",
									"        pm.expect(content[1].eventType).to.eql(\"StockAddedEvent\");",
									"        pm.expect(content[1].eventKey.version).to.eql(1);",
									"    });",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stockName\": \"utoy\",\n    \"remainingStock\": \"100\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/stocks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stocks"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockName\": \"<string>\",\n    \"remainingStock\": \"<long>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "addStock",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const urlStock = `${pm.environment.get('baseUrl')}/stocks` //createStock",
									"",
									"const reqBodyStock = {",
									"    \"stockName\": \"utoy\",",
									"    \"remainingStock\": \"100\"",
									"}",
									"",
									"pm.sendRequest({",
									"    url: urlStock,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(reqBodyStock)",
									"    }",
									"}, (err, response) => {",
									"    console.log(response.json())",
									"    const responseJson = response.json(); // stock control response body",
									"    pm.globals.set('stockId',responseJson.entityId)",
									"    pm.globals.set('remainingStockBeforeAddition', reqBodyStock.remainingStock)",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"const requestBody = pm.request.body;",
									"const requestBodyJson = JSON.parse(requestBody.raw)",
									"const url = `${pm.environment.get('baseUrl')}/stocks/${pm.globals.get('stockId')}`",
									"",
									"const reqBody = {",
									"    \"stockToAdd\": requestBodyJson.stockToAdd,",
									"    \"stockId\": pm.globals.get('stockId')",
									"}",
									"pm.test(\"returnPayment_CorrectParams_StatusToEqual200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"setTimeout(() => {",
									"    pm.sendRequest({",
									"        url,",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(reqBody)",
									"        }",
									"    }, (err, response) => {",
									"        if (err) {",
									"            console.log(err);",
									"        } else {",
									"            const responseJson = response.json();",
									"            pm.test(\"returnPayment_CorrectBody_PaymentStateToEqual\", () => {",
									"                const requestBody = pm.request.body;",
									"                const requestBodyJson = JSON.parse(requestBody.raw)",
									"                const expectedRemainingStock = parseInt(pm.globals.get(\"remainingStockBeforeAddition\")) + parseInt(requestBodyJson.stockToAdd);",
									"                console.log(pm.globals.get(\"remainingStockBeforeAddition\"), parseInt(requestBodyJson.stockToAdd), expectedRemainingStock);",
									"                console.log(responseJson)",
									"                pm.expect(responseJson.remainingStock).to.eql(expectedRemainingStock);",
									"            });",
									"        }",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stockToAdd\": \"20\",\n    \"stockId\": \"{{ stockId }}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/stocks/{{stockId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stocks",
								"{{stockId}}"
							]
						}
					},
					"response": [
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockToAdd\": \"<long>\",\n    \"stockId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/:stockId/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										":stockId",
										"add"
									],
									"variable": [
										{
											"key": "stockId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockToAdd\": \"<long>\",\n    \"stockId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/:stockId/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										":stockId",
										"add"
									],
									"variable": [
										{
											"key": "stockId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockToAdd\": \"<long>\",\n    \"stockId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/:stockId/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										":stockId",
										"add"
									],
									"variable": [
										{
											"key": "stockId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockToAdd\": \"<long>\",\n    \"stockId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/:stockId/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										":stockId",
										"add"
									],
									"variable": [
										{
											"key": "stockId"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stockToAdd\": \"<long>\",\n    \"stockId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stock/:stockId/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										":stockId",
										"add"
									],
									"variable": [
										{
											"key": "stockId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "findStocks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"findStocks_CorrectParams_StatusToEqual200\", () => {   ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"findStocks_CorrectParams_ContentToBeArray\", () => {   ",
									"    pm.expect(responseJson.content).to.be.a('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "pageNumber",
									"value": "<integer>"
								},
								{
									"key": "pageSize",
									"value": "<integer>"
								},
								{
									"key": "paged",
									"value": "<boolean>"
								},
								{
									"key": "sort.sorted",
									"value": "<boolean>"
								},
								{
									"key": "sort.unsorted",
									"value": "<boolean>"
								},
								{
									"key": "unpaged",
									"value": "<boolean>"
								}
							]
						}
					},
					"response": [
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stock/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"stocks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stock/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"stocks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stock/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"stocks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stock/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"stocks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "findStocks (for adding stock test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"const content = responseJson.content;",
									"",
									"const selectedStock = content[0]; // we selected the first stock, should we select randomly?",
									"",
									"const entityId = selectedStock.id",
									"const prevRemainingStock = selectedStock.remainingStock",
									"const prevVersion = selectedStock.version",
									"const pmResponse = pm.response.json();",
									"let url = `${pm.environment.get('baseUrl')}/stocks/${entityId}` // addStockById",
									"",
									"const stockToAdd = 100;",
									"const reqBody = {",
									"    stockToAdd",
									"}",
									"",
									"pm.sendRequest({",
									"    url,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(reqBody)",
									"    }",
									"}, (err, response) => {",
									"",
									"    const responseJson = response.json(); // stock control response body",
									"",
									"",
									"    pm.test(\"addStock_CreatedEntityId_VersionToBeIncreasedOne\", () => {",
									"        pm.expect(responseJson.version).to.eql(prevVersion + 1);",
									"    });",
									"",
									"",
									"    url = `${pm.environment.get('baseUrl')}/stocks/${entityId}` // findStockById",
									"",
									"    pm.sendRequest(url, (err, response) => {",
									"",
									"        const responseJson = response.json(); // stock control response body",
									"",
									"        pm.test(\"findStockById_CreatedEntityIdWith0ms_StockNotChange\", () => {",
									"            pm.expect(responseJson.remainingStock).to.eql(prevRemainingStock);",
									"        });",
									"    });",
									"",
									"    setTimeout(() => {",
									"        pm.sendRequest(url, (err, response) => {",
									"",
									"            const responseJson = response.json(); // stock control response body",
									"",
									"            pm.test(\"findStockById_CreatedEntityIdWith1500msDelay_StockToBeAdded\", () => {",
									"                pm.expect(responseJson.remainingStock).to.eql(prevRemainingStock + stockToAdd);",
									"            });",
									"        });",
									"",
									"    }, 1500)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "offset",
									"value": "<long>"
								},
								{
									"key": "pageNumber",
									"value": "<integer>"
								},
								{
									"key": "pageSize",
									"value": "<integer>"
								},
								{
									"key": "paged",
									"value": "<boolean>"
								},
								{
									"key": "sort.sorted",
									"value": "<boolean>"
								},
								{
									"key": "sort.unsorted",
									"value": "<boolean>"
								},
								{
									"key": "unpaged",
									"value": "<boolean>"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stock/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"stocks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stock/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"stocks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stock/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"stocks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stock/stocks?offset=<long>&pageNumber=<integer>&pageSize=<integer>&paged=<boolean>&sort.sorted=<boolean>&sort.unsorted=<boolean>&unpaged=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stock",
										"stocks"
									],
									"query": [
										{
											"key": "offset",
											"value": "<long>"
										},
										{
											"key": "pageNumber",
											"value": "<integer>"
										},
										{
											"key": "pageSize",
											"value": "<integer>"
										},
										{
											"key": "paged",
											"value": "<boolean>"
										},
										{
											"key": "sort.sorted",
											"value": "<boolean>"
										},
										{
											"key": "sort.unsorted",
											"value": "<boolean>"
										},
										{
											"key": "unpaged",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	]
}
